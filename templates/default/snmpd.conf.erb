# Generated by Chef on node <%= node['fqdn'] -%>
# Local modifications will be overwritten.
###############################################################################
#
# snmpd.conf:
#   An example configuration file for configuring the ucd-snmp snmpd agent.
#
###############################################################################
#
agentAddress udp:161<% if node.key?('ip6address') -%>,udp6:161<% end -%>
###############################################################################
# Access Control
####
# First, map the community string into a "security name"
#       sec.name  source          community
<% node['snmp']['sec_name'].each_pair do |sec_name, sources| %>
<% sources.each do |source| %>
com2sec <%= sec_name %>  <%= source %>  <%= node['snmp']['community'] %>
<% end %>
<% end %>

<% if node.key?('ip6address') %>
<% node['snmp']['sec_name6'].each_pair do |sec_name, sources| %>
<% sources.each do |source| %>
com2sec6 <%= sec_name %>  <%= source %>  <%= node['snmp']['community'] %>
<% end %>
<% end %>
<% end %>
# Second, map the security name into a group name:
#       groupName      securityModel sec.name
<% node['snmp']['groups']['v1'].each_pair do |group, sec_names| %>
<% sec_names.each do |sec_name| %>
group <%= group %>  v1  <%= sec_name %>
<% end %>
<% end %>

<% node['snmp']['groups']['v2c'].each_pair do |group, sec_names| %>
<% sec_names.each do |sec_name| %>
group <%= group %>  v2c  <%= sec_name %>
<% end %>
<% end %>

<% unless node['snmp']['rocommunity'].empty? %>
<% node['snmp']['rocommunity'].each do |ro| %>
rocommunity <%= ro %>
<% end %>
<% end %>
<% unless node['snmp']['rwcommunity'].empty? %>
<% node['snmp']['rwcommunity'].each do |rw| %>
rwcommunity <%= rw %>
<% end %>
<% end %>

<% if node['snmp']['full_systemview'] %>
# Third, create a view for us to let the group have rights to:
# Make at least  snmpwalk -v 1 localhost -c public system fast again.
#       name           incl/excl     subtree         mask(optional)
view    systemview    included   .1
<% end -%>
view    systemview    included   .1.3.6.1.2.1.1
view    systemview    included   .1.3.6.1.2.1.25.1.1
<% @groups.each do |group| -%>
# Finally, grant the group read-only access to the systemview view.
#       group          context sec.model sec.level prefix read   writenotif
access  <%= group -%> ""      any       noauth    exact  systemview none none
<% end %>
###############################################################################
# System contact information
#
# It is also possible to set the sysContact and sysLocation system
# variables through the snmpd.conf file:
<% if node['virtualization']['role'] == 'guest' %>
syslocation <%= node['snmp']['syslocationVirtual'] %>
<% else %>
syslocation <%= node['snmp']['syslocationPhysical'] %>
<% end %>
syscontact <%= node['snmp']['syscontact'] %>
sysName <%= node['fqdn'] %>

<% if node.key?('dmi') && node['dmi'].key?('system') &&
   node['dmi']['system'].key?('manufacturer') &&
   node['dmi']['system']['manufacturer'] =~ /dell/i -%>
# Allow Systems Management Data Engine SNMP to connect to snmpd using SMUX
smuxpeer .1.3.6.1.4.1.674.10892.1
<% end -%>
<% if ::File.exists?("/usr/lib64/libcmaX64.so") -%>
# Needed for HP System Management Homepage if shared object exists
dlmod cmaX /usr/lib64/libcmaX64.so
rocommunity <%= node['snmp']['community'] -%> 127.0.0.1
<% end -%>
<% unless node['snmp']['process_monitoring']['proc'].empty? -%>
###############################################################################
# Process monitoring
#
#  See the snmpd.conf manual page, and the output of "snmpd -H".
  <% node['snmp']['process_monitoring']['proc'].each do |proc_entry| -%>
proc <%= proc_entry -%>
  <% end -%>
<% end -%>
<% unless node['snmp']['process_monitoring']['procfix'].empty? -%>
  <% node['snmp']['process_monitoring']['procfix'].each do |procfix_entry| -%>
procfix <%= procfix_entry -%>
  <% end -%>
<% end -%>
<% if node['snmp']['include_all_disks'] -%>
# Disk Checks
#
# 
# When compiled with the ucd-snmp/disk module (included by default),
# the snmp agent can check the amount of available disk space and
# make sure it is above a set limit.
includeAllDisks <%= node['snmp']['all_disk_min'] -%>
<% end -%>
<% unless node['snmp']['disks'].empty? -%>
  <% node['snmp']['disks'].each do |disk| -%>
disk <%= disk['mount'] -%> <%= disk['min'] -%>
  <% end -%>
<% end -%>
<% unless node['snmp']['load_average'].empty? -%>
# Load Average Checks
#
# load [1MAX=DEFMAXLOADAVE] [5MAX=DEFMAXLOADAVE] [15MAX=DEFMAXLOADAVE]
#
# 1MAX:   If the 1 minute load average is above this limit at query
#         time, the errorFlag will be set.
# 5MAX:   Similar, but for 5 min average.
# 15MAX:  Similar, but for 15 min average.
<% load = node['snmp']['load_average'] -%>
load <%= load['max1'] -%> <%= load['max5'] -%> <%= load['max15'] -%>
<% end -%>
<% unless node['snmp']['trapsinks'].empty? %>
###############################################################################
# Trap communities and trapsinks
#
#  See the snmpd.conf manual page, and the output of "snmpd -H".
<% node['snmp']['trapcommunity'].each do |trapcom| %>
trapcommunity <%= trapcom %>
<% end %>
  <% node['snmp']['trapsinks'].each do |trapsink| -%>
trapsink <%= trapsink %>
  <% end -%>
<% end -%>

<% if node['snmp']['snmpd']['trapd_run'] == "yes" -%>
master agentx
<% end -%>
<% unless node['snmp']['extend_scripts'].empty? -%>
###############################################################################
# Extend Section
#
#
  <% node['snmp']['extend_scripts'].each do |name, cmd| -%>
extend <%= name -%> <%= cmd -%>
  <% end -%>
<% end -%>
<% if node['snmp']['disman_events']['enable'] -%>
###############################################################################
# DisMan Event MIB
#
#  See the snmpd.conf manual page.
createUser <%= node['snmp']['disman_events']['user'] -%> MD5 <%= node['snmp']['disman_events']['password'] -%>
rouser <%= node['snmp']['disman_events']['user'] -%> auth
agentSecName <%= node['snmp']['disman_events']['user'] -%>
linkUpDownNotifications <%= node['snmp']['disman_events']['linkUpDownNotifications'] -%>
defaultMonitors <%= node['snmp']['disman_events']['defaultMonitors'] -%>
  <% unless node['snmp']['disman_events']['monitors'].empty? -%>
    <% node['snmp']['disman_events']['monitors'].each do |monitor_entry| -%>
monitor <%= monitor_entry -%>
    <% end -%>
  <% end -%>
<% end -%>
<% unless node['snmp']['additional_settings'].empty? %>
###############################################################################
# Additional Settings
# 
# see the snmpd.conf manual page.
  <% node['snmp']['additional_settings'].each do |k, v| %>
<%= k %> <%= v %>
  <% end %>
<% end %>
